package com.shine.iot.signal.db.rest.entity;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.annotation.TableId;import com.baomidou.mybatisplus.annotation.TableName;import com.baomidou.mybatisplus.extension.activerecord.Model;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import java.io.Serializable;import java.util.Date;@Data@TableName(value = "deviceallmsginfo")@NoArgsConstructor@AllArgsConstructorpublic class DeviceAllMsgInfoModel extends Model<DeviceAllMsgInfoModel> {    private static final long serialVersionUID = -3603138278689784719L;    //value与数据库主键列名一致，若实体类属性名与表主键列名一致可省略value; 指定自增策略    @TableId(value = "msgid", type = IdType.AUTO)    private Long msgid;    /* 信息标识 */    // 若没有开启驼峰命名，或者表中列名不符合驼峰规则，可通过该注解指定数据库表中的列名，exist标明数据表中有没有对应列    // @TableField(value = "mcu_id",exist = true)    private String mcuID;    /* 设备mcuid */    private String msgType;    /* 消息类型 节点的命令类型 */    private String msgDirect;    /* 消息方向 U 节点上行；D:服务器下行 */    private Long msgFctrl;    /* 消息帧号 */    private String isAck;    /* 是否为ACK 1-是  0-否 */    private String payloadData;    /* payload数据内容 */    private Date msgTime;    /* 消息时间 */    private Integer loraFcnt;    /* Lorawan(NS) 上行数据帧号、下行数据帧号  cw add */    private Long refid;    /*  */    //重写这个方法，return当前类的主键    @Override    protected Serializable pkVal() {        return msgid;    }}