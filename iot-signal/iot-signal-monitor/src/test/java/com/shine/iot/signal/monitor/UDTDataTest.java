package com.shine.iot.signal.monitor;

import org.apache.commons.codec.binary.Hex;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

//import base64.base64__;

public class UDTDataTest {


    /**
     * @param args
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
        try {
            sendMessage();

//			byte[] t = {0x17, 0x3D,0x11,0x41,(byte)0x1F,(byte)97,(byte)0xF7,0x03};
//			System.out.println(DigitUtil.convert2long(hexStringToByte("170E270B045FBEBA")));
//			System.out.println(DigitUtil.convert2long(hexStringToByte("173D160B045FBEBA")));
//			System.out.println(DigitUtil.convert2long(hexStringToByte("170E270B045FBEBA")));
            //用户名加密规则
            //MessageDigest md = MessageDigest.getInstance("MD5");
			/*System.out.println(Md5.MD5("123456", "utf-8"));
			System.out.println(Md5.MD5("huanying", "utf-8"));*/
            //数据库加密规则
			/*System.out.println(Encrypter.encrypt("iotuser"));
			System.out.println(Encrypter.decrypt("nlmIWmhjieE."));*/
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public static void sendMessage() throws Exception {

        System.out.println("发送端启动......");
//
        String hexStr = "73746172740000480000000100000100041C083560000200011000030001C00004000140000500010100060002FF8F000700020023000800120100FFFFFFFFFFFFFFFF0000010004000000F6E300000";
        hexStr = "73746172740000480000000100000100041C083560000200011000030001DA0004000140000500010100060002FF8600070002FFE0000800120100170E270B045FBEBA00000011030017915C0E";
        hexStr = "73746172740000480000000100000100041c5480a0000200011000030001e40004000140000500010100060002ff7500070002ff6f00080012"
                + "0100babe5f040b171d170403"
                + "0001"
                + "03"
                + "00fdc3af84000";
        hexStr = "5348494e455f4e423030305f383639343035303330303035333638585f34363030343233303439303033373558"
                + "5f303138"
                + "5f010044b9f11a38cfbf19"
                + "2903"
                + "0002"
                + "04"
                + "007a32"
                + "5f4537323100000000000000000";
        hexStr = "5348494e455f4e423030305f383635383230303331333137303731585f34363030343233303439303030353158"
                + "5f303138" //_018
                + "5f0100"
                + "13c702198acf26bb"
                + "2401"
                + "0015"
                + "03"
                + "00d391"
                + "5f343036330000000";
        // 000011411F97F703
        hexStr = "5348494e455f4e423130305f383639343035303330303534373632585f34363030343233303439303030353158"
                + "5f303536"
                + "5f3831303030303033463739373146354431313030303046464646304335334646464646464646"
                + "3234303530303030313030303030"
                + "41424139"
                + "5f324134430000";
        //解析式有问题的数据格式
        hexStr = "7374617274010035cacbb8010000007a0004011c63c2e0021003100440050106ffb207006b080100babe5f040b1e1d170403040d0000951385fc";
        //飞繁账号 设备447 测试
        hexStr = "737461727401003fcacbb801000001420007011c6ceaa0021003100408050106ffab07007d08810100ffff0c1e4a07000003f7f985ffffffff04050000050300a593eb40000";

        hexStr = "737461727401003fcacbb801000001420004011c63c2e0021003100408050106ffa907006b08810100ffff0c1e4a07000003f7f985ffffffff0405000007030070d7d3c5000";
        //变送器设备测试数据 05-开机
        hexStr = "7374617274010048cacbb801000001330005011c66d020021003100408050106ffd707006908810000ffff0c26370c000003f7f983ffffffff0b0100000911090a05b4040438051a5ecb3f74c8";
        //11 - 上报设备状态
        hexStr = "737461727401004bcacbb8010000014f0002011c5da860021003100408050106ffeb07007808810600ffff0c26370c000003f7f983ffffffff1b0100000311090a05a1060438071a5e18dcaf24c94d";
        hexStr = "737461727401004bcacbb8010000014f0002011c5da860021003100408050106ffeb07007808810600ffff0c26370c000003f7f983ffffffff1b0100000411090a05b2060438071a5ed162af24c94d";


        hexStr = "7374617274010040cacbb8010000014f0004011c63c2e0021003100408050106ffc807007508810100ffff0c2f5107000003f7f985ffffffff040500000703010176e9513300";
        hexStr = "7374617274010040cacbb8010000014f0002011c5da860021003100408050106ffd307007308810100ffff0c2f5107000003f7f985ffffffff0405000008040101ebba1266000000";

        hexStr = "7374617274010040cacbb8010000014f0006011c69dd60021003100408050106ffce07005708810100ffff0c2f5107000003f7f985ffffffff040500000a030101d550c8bd00000000";

        hexStr = "737461727401000dcacbb8010000014fbd0c";

        hexStr = "5348494e455f4e423030305f383639343035303330303035333638585f34363030343233303439303033373558"
                + "5f303138"
                + "5f010044b9f11a38cfbf19"
                + "2903"
                + "0003"
                + "03"
                + "007a32"
                + "5f4537323100000000000000000";
        //NB - 可燃气体
        hexStr = "5348494e455f4e423130305f383637373236303332373239393333585f343630303436363639323030303234585f3035365f38313042303046464646304334413445303730303030303346374639383546464646464646463234303330303030303030353030314144345f42443832";

        //变送器测试数据
        //开机
        hexStr = "5348494e455f4e423230305f383636393731303330353435353537585f343630303432333034393030343636585f3038305f38313036303046464646304332363337304330303030303346374639383346464646464646463234303130303030303030353043303630313930303730394334303430303030303530464646323838465f37454146";
        //加压
        hexStr = "5348494e455f4e423230305f383636393731303330353435353537585f343630303432333034393030343636585f3036385f38313036303046464646304332363337304330303030303346374639383346464646464646463234303130303030303130333036303038303130304130303032394637355f33343437";

        //液位
        //开机
        hexStr = "5348494e455f4e423230305f383636393731303330353439363235585f343630303432333034393030313532585f3038305f38313036303046464646304332363145304330303030303346374639383346464646464646463234303130303030303030353043303630313930303730394334303430303030303530464646433738305f33363344";
        hexStr = "5348494e455f4e423230305f383636393731303330353439363235585f343630303432333034393030313532585f3037345f38313036303046464646304332363145304330303030303346374639383346464646464646463242303130303030303431313039304130314133303630313930303730394334353641375f31433342";
        //开机 -液压
        hexStr = "5348494e455f4e423230305f383636393731303330353337383130585f343630303432333034393030343636585f3039325f38313036303046464646304332363337304330303030303346374639383346464646464646463234303130303030303030353132304130313839303430313930303530394334303630304338303730413843303930313243423541365f43423746";

        //NB - 通讯卡（IMEI、IMSI、ICCID）
        hexStr = "5348494e455f4e423330305f383636393731303330353439363235585f343630303432333034393030313532585f38393836303430333130313837303339303135315f3039325f38313036303046464646304332363145304330303030303346374639383346464646464646463234303130303030303030353132304130314644303430313930303530394334303630304338303730413843303930313243314544325f41334635";
        // cmd - 报警
        hexStr = "5348494e455f4e423330305f383636393731303330353337383130585f343630303432333034393030343636585f38393836303430333130313837303339303436355f3036385f38313036303046464646304332363337304330303030303346374639383346464646464646463234303130303030303130333036303038303130304130313839384243355f43374536";
        // cmd - 消警
        hexStr = "5348494e455f4e423330305f383636393731303330353337383130585f343630303432333034393030343636585f38393836303430333130313837303339303436355f3036385f38313036303046464646304332363337304330303030303346374639383346464646464646463234303130303030303230343036303038303030304130313839423535425f39313544";
        //水位上报设备状态
        hexStr = "5348494e455f4e423330305f383636393731303330353439363235585f343630303432333034393030313532585f38393836303430333130313837303339303135315f3037345f38313036303046464646304332363145304330303030303346374639383346464646464646463242303130303030303131313039304130314536303630313930303730394334313834315f37324542";
        //水位上报设备状态 -- 当前值为0
        hexStr = "5348494e455f4e423330305f383636393731303330353439363235585f343630303432333034393030313532585f38393836303430333130313837303339303135315f3037345f38313036303046464646304332363145304330303030303346374639383346464646464646463242303130303030313031313039304130313843303630313930303730394334363432335f34383836";
        //LoraLite
        //测水压
        hexStr = "7374617274010045cacbb8010000014f0003011c60b5a0021003100408050106ffcf07005c08810600ffff0c26370c000003f7f983ffffffff040100000503060080100a01db6043820600000";

        //************************ LoraLite Test signal **************************************//
        //LoraLite - 烟感设备数据 -- 8位MCUID -- TLV版本00
        hexStr = "7374617274010035cacbb8010000007a0005011c66d020021003100440050106ff99070052080100babe5f040b1311170403066f00002cfd72e3";
        //LoraLite - 烟感设备数据 -- 16位MCUID -- TLV版本01 -- TLV的数据按照顺序排列
        hexStr = "737461727401003fcacbb801000001420007011c6ceaa0021003100408050106ffab07007d08810100ffff0c1e4a07000003f7f985ffffffff04050000050300a593eb40";
        //LoraLite - 八月网管 -- 16位MCUID -- TLV版本02 -- TLV数据不按照顺序排列（信号强度、灵敏度、信噪比等）
        //hexStr = "737461727402003dcacbb8010000031001002d00070408050106ffd107007a081f810100ffff0c1f120900000072838dffffffff04050000000503020cdeff0e493c";

        // 1、创建UDP的Socket，使用DatagramSocket对象
        DatagramSocket ds = new DatagramSocket(9823);
        byte[] buffer = hexStringToByte(hexStr);
//		  byte[] buffer = Hex.decodeHex(hexStr);
        DatagramPacket dp = new DatagramPacket(buffer, buffer.length, InetAddress.getByName("127.0.0.1"), 1700); //1780
//		  DatagramPacket dp = new DatagramPacket(buffer, buffer.length, InetAddress.getByName("118.25.46.85"), 1780);//172.17.0.17
        // 3、通过UDP的Socket服务将数据包发送出去，使用send方法
        ds.send(dp);
        ds.receive(dp);
        System.out.println("" + Hex.encodeHexString(dp.getData()));
        // 4、关闭Socket服务
        ds.close();
    }

    public static byte[] hexStringToByte(String hex) {
        int len = (hex.length() / 2);
        byte[] result = new byte[len];
        char[] achar = hex.toCharArray();
        for (int i = 0; i < len; i++) {
            int pos = i * 2;
            result[i] = (byte) (toByte(achar[pos]) << 4 | toByte(achar[pos + 1]));
        }
        return result;
    }

    private static int toByte(char c) {
        byte b = (byte) "0123456789ABCDEF".indexOf(c);
        return b;
    }

    public static byte[] contructPHYPayloadData() {
        byte[] phyData = new byte[1024];


        return phyData;
    }
}
